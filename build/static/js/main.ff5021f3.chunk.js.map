{"version":3,"sources":["img/GOBLogo-Clean.png","Navbar/Navbar.js","SongDisplay/SongDisplay.js","TextInput/TextInput.js","SubmitSong/SubmitSong.js","SongEditor/SongEditor.js","AdminSongDisplay/AdminSongDisplay.js","Bandit/Bandit.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","sessionCheck","fetch","credentials","method","then","res","json","console","log","state","auth","setState","username","key","access_token","tokens","refresh_token","expiry","expires_at","expirySeconds","expires_in","getUserLinks","userLinkArray","name","href","class","linkarray","logoutOverride","event","preventDefault","delete_cookie","window","location","document","cookie","renderLinkArray","map","item","i","className","onClick","to","this","src","Logo","alt","target","Component","SongDisplay","convertToTrophy","number","parseInt","getSongList","axios","get","Songs","data","getSongJSX","updateProgress","length","loading","JSX","song","trackTrophy","winner","props","play","data-musicSrc","streamurl","data-name","data-artists","music","lyrics","vocals","round","he","decode","votes","musicvote","lyricsvote","vocalsvote","songJSX","type","color","height","width","TextInput","setFileName","filename","value","replace","propfunction","label","ph","propvalue","placeholder","required","onChange","accept","SubmitSong","validURL","str","RegExp","test","handleSongSubmit","formValues","lyricsheet","submitted","formResponse","errors","renderFormResponse","songPostData","FormData","append","encode","entries","pair","uploading","formClass","url","postURL","onUploadProgress","ProgressEvent","percentage","Math","loaded","total","progress","progressText","logPercent","catch","err","setFormMusician","setFormLyricist","setFormVocals","setFormLyricsheet","setFormSongFile","files","setFormSongName","logState","hideSubmittedInfo","errs","Object","keys","forEach","push","message","aria-label","successResponse","content","formPlaceholders","placeholders","action","percent","filledBackground","unfilledBackground","SongEditor","fullURL","match","params","id","body","JSON","stringify","headers","getSongByID","handleFormUpdate","hFUformValues","k","v","AdminSongDisplay","deleteSong","songID","getAttribute","confirm","songsArray","songs","index","_id","splice","deletedSong","jsonResponse","response","hideNotification","showDeletedResponse","data-id","bandit","user","forceUpdate","App","startPlayer","playerActive","audioList","singer","musicSrc","opts","mode","toggleMode","autoHiddenCover","glassBg","showThemeSwitch","showDownload","preload","audio","exact","path","render","component","routerProps","audioLists","Boolean","hostname","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.ff5021f3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/GOBLogo-Clean.7ef2f3f7.png\";","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Link, Redirect} from 'react-router-dom';\r\nimport Logo from '../img/GOBLogo-Clean.png';\r\nimport './Navbar.css';\r\n\r\nclass Navbar extends Component {\r\n    constructor(){\r\n        super();\r\n\r\n\r\n        let userLinkArray = [{\r\n            name: 'Login',\r\n            href: 'https://danieledminster.com:8080/auth/reddit',\r\n            class: 'Navbar__Flexbox__Right__Item__Button'\r\n        }];\r\n\r\n        this.state = {\r\n            auth: false,\r\n            linkarray: userLinkArray\r\n        };\r\n\r\n        let userLinkJSX = '';\r\n\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.sessionCheck();\r\n\r\n        // this.state.auth === true ? this.getUserLinks(true): this.getUserLinks(false);\r\n    \r\n\r\n    }\r\n\r\n    sessionCheck = () => {\r\n        // let ls = window.localStorage;\r\n\r\n\r\n        let url = \"https://danieledminster.com:8080/sessioncheck\";\r\n        fetch(url, { \r\n                credentials: \"include\",\r\n                method: 'GET' \r\n        })\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            console.log(\"Fetch Response: \", res);\r\n\r\n            // https://www.reddit.com/api/v1/access_token\r\n\r\n            // if(\"tokens\" in res)\r\n            \r\n            if(\"key\" in res && this.state.auth === false) {\r\n                this.setState({\r\n                    auth: true,\r\n                    username: res.key,\r\n                    access_token: res.tokens.access_token,\r\n                    refresh_token: res.tokens.refresh_token,\r\n                    expiry: res.tokens.expires_at,\r\n                    expirySeconds: res.tokens.expires_in\r\n                });\r\n                this.getUserLinks(true);\r\n                // console.log('true');\r\n                // console.log('getuserlinks true');\r\n                // console.log(\"state: \", this.state);\r\n            }\r\n            else {\r\n                this.getUserLinks(false);\r\n                // console.log('false');\r\n            }\r\n\r\n        });\r\n \r\n\r\n    }\r\n\r\n\r\n    getUserLinks = (auth) => {\r\n        // let JSX;\r\n\r\n       \r\n        if(auth === true)\r\n        {\r\n\r\n            console.log(\"getUserLinks\", auth);\r\n            this.userLinkArray = [\r\n                { \r\n                    name: this.state.username,\r\n                    href: `/user/${this.state.username}`,\r\n                    class: 'Navbar__Flexbox__Right__Item'\r\n                },\r\n                {\r\n                    name: 'Admin',\r\n                    href: '/admin',\r\n                    class: 'Navbar__Flexbox__Right__Item'\r\n                },\r\n                {\r\n                    name: 'Submit song',\r\n                    href: '/submitsong',\r\n                    class: 'Navbar__Flexbox__Right__Item__Button'\r\n                },\r\n                {\r\n                    name: 'Logout',\r\n                    href: '/logout',\r\n                    class: 'Navbar__Flexbox__Right__Item'\r\n                }\r\n            ];\r\n\r\n            this.setState({\r\n                linkarray: this.userLinkArray\r\n            })\r\n\r\n\r\n        }\r\n        else {\r\n            this.userLinkArray = [\r\n            { \r\n                name: 'Login',\r\n                href: 'https://danieledminster.com:8080/auth/reddit',\r\n                class: 'Navbar__Flexbox__Right__Item__Button'\r\n            }];\r\n\r\n            this.setState({\r\n                linkarray: this.userLinkArray\r\n            })\r\n\r\n            // this.userLinkJSX = `<div className=\"Navbar__Flexbox__Right__Item\"><Link to=\"127.0.0.1:4000/auth/login\">Login</Link></div>`;\r\n\r\n            // return this.userLinkJSX;\r\n\r\n        }\r\n        // console.log(this.userLinkJSX);\r\n\r\n    }\r\n\r\n    logoutOverride = (event) => {\r\n        event.preventDefault();\r\n        this.delete_cookie(\"__gameofbandsdev\");\r\n        this.sessionCheck();\r\n        this.setState({ auth: false });\r\n        window.location=\"/\";\r\n    \r\n\r\n    }\r\n    \r\n    delete_cookie = (name) => {\r\n        document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';\r\n      }\r\n    renderLinkArray = () => {\r\n        \r\n        return (this.state.linkarray.map((item, i) => {\r\n            if(item.name === 'Login') \r\n                return <div key={i} className={item.class}><a href={item.href}>{item.name}</a></div>\r\n            else if(item.name === 'Logout') \r\n                return <div key={i} className={item.class}><a href={item.href} onClick={this.logoutOverride}>{item.name}</a></div>\r\n            else \r\n                return <div key={i} className={item.class}><Link to={item.href}>{item.name}</Link></div>\r\n            // return <div key={i} className=\"Navbar__Flexbox__Right__Item\"><Link to={item.href}>{item.name}</Link></div>\r\n        }));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <div className=\"Navbar\">\r\n                <div className=\"Navbar__Flexbox__Left\">\r\n                    <div className=\"Navbar__Flexbox__Left__Brand\">\r\n                        <img src={Logo} alt=\"Game of Bands Logo.\" className=\"Navbar__Flexbox__Left__Brand__img\" />\r\n                    </div>\r\n\r\n                    <div className=\"Navbar__Flexbox__Left__Item\">\r\n                        <a href=\"#\">Rounds</a>\r\n                    </div>\r\n\r\n                    <div className=\"Navbar__Flexbox__Left__Item\">\r\n                    <Link to=\"/\">Songs</Link>\r\n                    </div>\r\n\r\n                    <div className=\"Navbar__Flexbox__Left__Item\">\r\n                    <a href=\"https://reddit.com/r/gameofbands\" target=\"_blank\">/r/gameofbands</a>\r\n                    </div>\r\n\r\n                    <div className=\"Navbar__Flexbox__Left__Item\">\r\n                    <a href=\"https://discordapp.com/invite/h7ywF3\">Discord</a>\r\n                    </div>\r\n        \r\n                </div>\r\n\r\n                <div className=\"Navbar__Flexbox__Right\">\r\n         \r\n\r\n                        {/* { console.log(this.state.linkarray) } */}\r\n                        { this.renderLinkArray()}\r\n\r\n                    \r\n\r\n                </div>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navbar;","import React, { Component } from 'react';\r\nimport './SongDisplay.css';\r\n// import Songs from '../data/songs.json';\r\n\r\nimport { Link } from 'react-router-dom';\r\nimport he from 'he';\r\nimport axios from 'axios';\r\nimport ReactLoading from 'react-loading';\r\n\r\n\r\nclass SongDisplay extends Component {\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = { \r\n            Songs: [], \r\n            loading: true,\r\n            songJSX: ''\r\n        };\r\n    }\r\n\r\n    convertToTrophy = number => {\r\n        if(number == null) {\r\n            return \"\";\r\n        } \r\n        else if (parseInt(number) === 1)\r\n        {\r\n            return <span className=\"material-icons\">emoji_events</span>\r\n        }\r\n\r\n    }\r\n\r\n    getSongList = () => {\r\n        console.log('starting song api request');\r\n        axios.get('https://danieledminster.com:8080/all/desc')\r\n        .then(res => {\r\n            console.log(\"songs axios: \", res);\r\n            this.setState({ Songs: res.data }, this.getSongJSX);    \r\n        });\r\n    }\r\n\r\n    componentDidMount(){\r\n        console.log('song display rendered');\r\n        this.getSongList();\r\n    }\r\n\r\n    updateProgress = (i) => {\r\n        let max = this.state.Songs.length;\r\n        // console.log(this.state.Songs.length)\r\n        // let max = 1507;\r\n        // let max = 1500;\r\n        // let progress = ( Math.round((i / max) * 100) );\r\n\r\n        if(max - i === 1) this.setState({ loading: false });\r\n        // console.log(progress);\r\n        // if(progress % 0 == 0) console.log(progress);\r\n        // if (progress % 20 === 0 && progress !== this.state.progress && progress !== 0) {\r\n        //     //  this.setState({ progress: progress});\r\n        // }\r\n    }\r\n\r\n    getSongJSX = () => {\r\n        let JSX = this.state.Songs.map((song, i) => {\r\n\r\n            let trackTrophy = this.convertToTrophy(song.winner);\r\n                    return(\r\n\r\n                        <div key={i} className=\"SongDisplay__Item\">\r\n                            \r\n                                            <div className=\"SongDisplay__Item__PlayIcon\" >\r\n                                                <span className=\"material-icons\" \r\n                                                onClick={this.props.play} \r\n                                                data-musicSrc={song.streamurl}\r\n                                                data-name={song.name}\r\n                                                data-artists={`${song.music}, ${song.lyrics}, ${song.vocals}`}>\r\n                play_circle_filled\r\n                </span></div>\r\n\r\n                <div className=\"SongDisplay__Item__PlayListAdd\"><span className=\"material-icons\">\r\n                playlist_add\r\n                </span></div>\r\n            \r\n                            <div className=\"SongDisplay__Item__Round\">{song.round}</div>\r\n                            <div className=\"SongDisplay__Item__Name\">{he.decode(song.name)}</div>\r\n                            <div className=\"SongDisplay__Item__TrackWin\">\r\n                            {trackTrophy}\r\n                                </div>\r\n                            <div className=\"SongDisplay__Item__TrackVotes\">{song.votes}</div>\r\n                            <div className=\"SongDisplay__Item__Musician\"><Link to={`/bandit/${song.music}`} className=\"ProfileLink\">{song.music}</Link></div>\r\n                            <div className=\"SongDisplay__Item__MusicVotes\">{song.musicvote}</div>\r\n                            <div className=\"SongDisplay__Item__Lyricist\"><Link to={`/bandit/${song.lyrics}`} className=\"ProfileLink\">{song.lyrics}</Link></div>\r\n                            <div className=\"SongDisplay__Item__LyricVotes\">{song.lyricsvote}</div>\r\n                            <div className=\"SongDisplay__Item__Vocals\"><Link to={`/bandit/${song.vocals}`} className=\"ProfileLink\">{song.vocals}</Link></div>\r\n                            <div className=\"SongDisplay__Item__VocalVotes\">{song.vocalsvote}</div>\r\n                            \r\n                            \r\n                            \r\n                            \r\n                        </div>\r\n                    );\r\n            });\r\n\r\n            this.setState({ songJSX: JSX });\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            \r\n                <>\r\n                {this.state.songJSX === '' ? \r\n                <div className=\"MyLoader\">\r\n                <ReactLoading type=\"spin\" color=\"#7c61f7\" height={'5%'} width={'5%'} /> \r\n                </div>\r\n                \r\n                : \r\n                \r\n                <div className=\"SongDisplay\">\r\n                {this.state.songJSX}\r\n                </div>\r\n                \r\n                }\r\n                </>\r\n                \r\n        );\r\n    }\r\n}\r\n\r\nexport default SongDisplay;","import React, { Component } from 'react';\r\nimport './TextInput.css';\r\n\r\n\r\nclass TextInput extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            filename: 'No file selected.'\r\n        }\r\n    }\r\n\r\n    setFileName = (event) => {\r\n        let filename = event.target.value.replace(/^.*\\\\/, \"\");\r\n        this.props.propfunction(event);\r\n        this.setState({\r\n            filename: filename\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let label, ph, name, type, propvalue, propfunction;\r\n        if(this.props.label)  label = this.props.label;\r\n        if(this.props.placeholder)  ph = this.props.placeholder;\r\n        if(this.props.name)  name = this.props.name;\r\n        if(this.props.value) propvalue = this.props.value;\r\n        if(this.props.propfunction) propfunction = this.props.propfunction; \r\n        this.props.type == null  ? type=\"text\" : type = this.props.type;\r\n\r\n        if(type !== \"textarea\" && type !== \"file\") {\r\n\r\n            return(\r\n                <div className=\"TextInput\">\r\n                <label>{label}:</label>\r\n                <div>\r\n                <input type={type} placeholder={ph} name={name} className=\"SubmitSongForm\" required value={propvalue} onChange={propfunction} /> \r\n                </div>\r\n                </div>\r\n            );\r\n        }\r\n        else if(type === \"file\") {\r\n            return(\r\n                <div className=\"TextInput\">\r\n                <label>{label}:</label>\r\n                <div>\r\n                <input accept=\"audio/*\" type={type} name={name} className=\"SubmitSongForm__FileInput\" required onChange={this.setFileName} /> \r\n                \r\n                </div>\r\n                <label className=\"TextInput__FileLabel\">{this.state.filename}</label>\r\n                </div>\r\n            );\r\n        }\r\n        else {\r\n            return(\r\n                <div className=\"TextInput\">\r\n                <label>{label}:</label>\r\n                <div>\r\n                <textarea name={name} className=\"SubmitSongForm\" placeholder={ph} required onChange={propfunction}>{propvalue}</textarea> \r\n                </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default TextInput;\r\n","import React, { Component } from 'react';\r\nimport TextInput from '../TextInput/TextInput';\r\nimport './SubmitSong.css';\r\nimport axios from 'axios';\r\nimport e from 'cors';\r\nimport he from 'he';\r\nimport \"react-step-progress-bar/styles.css\";\r\nimport { ProgressBar, Step } from \"react-step-progress-bar\";\r\n\r\n\r\nclass SubmitSong extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        let postURL = 'https://danieledminster.com:8080/create';\r\n\r\n        this.state = {\r\n            content: 'You must be logged in to do that.',\r\n            postURL: postURL, \r\n            submitted: false,\r\n            formResponse: '',\r\n            formPlaceholders: {\r\n                name: 'Never Gonna Give You Up',\r\n                url: 'https://soundcloud.com/doomgrip776/rick-astley-never-gonna-give-you-up-airhorn-remix',\r\n                music: 'BedroomProducer',\r\n                lyrics: 'DistinguishedWriter',\r\n                vocals: 'AntiVoxxer',\r\n                lyricsheet: 'I wrote you but you still ain\\'t callin\\''\r\n            },\r\n            formValues: {\r\n                name: '',\r\n                // url: '',\r\n                music: '',\r\n                lyrics: '',\r\n                vocals: '',\r\n                lyricsheet: '',\r\n                song: ''\r\n            },\r\n            auth: false,\r\n            uploading: false,\r\n            progressText: 'Uploading...',\r\n            formClass: ''\r\n\r\n        }\r\n\r\n       \r\n    }\r\n\r\n    componentDidMount() {\r\n        this.sessionCheck();\r\n        // this.content = 'You must be logged in to do that.';\r\n    }\r\n\r\n    sessionCheck = () => {\r\n        // let ls = window.localStorage;\r\n\r\n\r\n        let url = \"https://danieledminster.com:8080/sessioncheck\";\r\n        fetch(url, { \r\n                credentials: \"include\", \r\n        })\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            console.log(\"Fetch Response: \", res);\r\n\r\n\r\n            \r\n            if(\"key\" in res && this.state.auth === false) {\r\n                this.setState({\r\n                    auth: true,\r\n                    username: res.key,\r\n                    access_token: res.tokens.access_token,\r\n                    refresh_token: res.tokens.refresh_token,\r\n                    expiry: res.tokens.expires_at,\r\n                    expirySeconds: res.tokens.expires_in\r\n                });\r\n\r\n                this.setState({ auth: true} );\r\n            }\r\n            else {\r\n\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    validURL = (str) => {\r\n        //https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url\r\n\r\n        var pattern = new RegExp('^(https?:\\\\/\\\\/)?'+ // protocol\r\n          '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|'+ // domain name\r\n          '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))'+ // OR ip (v4) address\r\n          '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*'+ // port and path\r\n          '(\\\\?[;&a-z\\\\d%_.~+=-]*)?'+ // query string\r\n          '(\\\\#[-a-z\\\\d_]*)?$','i'); // fragment locator\r\n        return !!pattern.test(str);\r\n      }\r\n\r\n    handleSongSubmit = (event) => {\r\n        event.preventDefault();\r\n        // console.log(event);\r\n\r\n        if(this.state.formValues.song) {\r\n\r\n\r\n\r\n            let { name, music, lyrics, vocals, lyricsheet, song } = this.state.formValues;\r\n\r\n\r\n            if(name === '' || music === '' || lyrics === '' || vocals === '' || lyricsheet === '')\r\n            {\r\n                    this.setState({\r\n                        submitted: true,\r\n                        formResponse: {\r\n                            errors: [{\r\n                                'message': 'All fields are required.'\r\n                            }]\r\n                        }\r\n                    }, this.renderFormResponse);\r\n\r\n                    return;\r\n            }\r\n            \r\n            console.log(this.state.formValues);\r\n            let songPostData = new FormData();\r\n            songPostData.append('name', name);\r\n            songPostData.append('music', music);\r\n            songPostData.append('lyrics', lyrics);\r\n            songPostData.append('vocals', vocals);\r\n            songPostData.append('lyricsheet', he.encode(lyricsheet));\r\n            songPostData.append('song', song);\r\n            // songPostData.append(Object.keys(this.state.formValues), [this.state.formValues]);\r\n\r\n            // console.log('submit: ', songPostData.entries());\r\n            for (let pair of songPostData.entries()) {\r\n                console.log(pair[0]+ ', ' + pair[1]); \r\n            }\r\n            // songPostData.append('name')\r\n            this.setState({uploading: true, formClass: 'veil' });\r\n            axios({\r\n                url: this.state.postURL,\r\n                method: 'POST',\r\n                // withCredentials: true,\r\n                data: songPostData,\r\n                onUploadProgress: (ProgressEvent) => {\r\n                    let percentage = Math.round( (ProgressEvent.loaded * 100) / ProgressEvent.total );\r\n                    if(this.state.progress >= 99) this.setState({ progressText: 'Converting...'});\r\n                    this.setState({ progress: percentage }, this.logPercent)\r\n                }\r\n            }).then(res => {\r\n                this.setState({uploading: false, submitted: true, formResponse: res, progressText: 'Uploading...', progress: 0, formClass: '' });\r\n                console.log(res)\r\n                // console.log(res.data)\r\n            })\r\n            .catch(err => console.log(err))\r\n\r\n        }\r\n        else {\r\n            this.setState({\r\n                submitted: true,\r\n                formResponse: {\r\n                    errors: [{\r\n                        'message': 'Song file is required.'\r\n                    }]\r\n                }\r\n            }, this.renderFormResponse);\r\n        }\r\n\r\n        // if(this.validURL(this.state.formValues.url))\r\n        // {\r\n        //     let url = 'https://danieledminster.com:8080/create';\r\n        //     // alert(event.target.textContent);\r\n\r\n        //     console.log(this.state.formValues);\r\n\r\n        //     fetch(url, {\r\n        //         method: 'post',\r\n        //         credentials: 'include',\r\n        //         body: JSON.stringify(this.state.formValues),\r\n        //         headers: {\r\n        //             'Content-type': 'application/json'\r\n        //         }\r\n\r\n        //     }).then(res => res.json())\r\n        //     .then(res => {\r\n        //         console.log(res);\r\n        //         this.setState({\r\n        //             submitted: true,\r\n        //             formResponse: res\r\n        //         })\r\n        //     })\r\n        // }\r\n        // else {\r\n        //     this.setState({\r\n        //         submitted: true,\r\n        //         formResponse: {\r\n        //             errors: {\r\n        //                 url: {\r\n        //                     message: 'Invalid Song URL'\r\n        //                 }\r\n        //             }\r\n        //         }\r\n        //     })\r\n        // }\r\n\r\n    }\r\n\r\n    logPercent = () => console.log(this.state.progress);\r\n\r\n    // handleFormUpdate = (event) => {\r\n    //     // console.log(event.target.name);\r\n      \r\n    //     let {name, value} = event.target;\r\n    //     let file = '';\r\n    //     event.target.files === null ? file = '': file=event.target.files[0];\r\n\r\n    //     let hFUformValues = {};\r\n    //     // console.log(value);\r\n\r\n    //     for(const [k, v] of Object.entries(this.state.formValues)) { \r\n    //         // currentFormValues[k] = v;\r\n    //         if(k === name && name !== 'song') {\r\n    //             hFUformValues[k] = value;\r\n    //         }\r\n    //         else if(k === name && name === 'song') {\r\n    //             hFUformValues[k] = file;\r\n    //         }\r\n    //         else {\r\n    //             hFUformValues[k] = v;\r\n    //         }\r\n    //     }\r\n\r\n    //     this.setState({\r\n    //         formValues: hFUformValues\r\n    //     }, this.logState);\r\n\r\n    // }\r\n\r\n    setFormMusician = event => {\r\n        let formValues = this.state.formValues;\r\n        formValues.music = event.target.value;\r\n        this.setState({\r\n            formValues: formValues\r\n        })\r\n    }\r\n\r\n    setFormLyricist = event => {\r\n        let formValues = this.state.formValues;\r\n        formValues.lyrics = event.target.value;\r\n        this.setState({\r\n            formValues: formValues\r\n        })\r\n    }\r\n\r\n    setFormVocals = event => {\r\n        let formValues = this.state.formValues;\r\n        formValues.vocals = event.target.value;\r\n        this.setState({\r\n            formValues: formValues\r\n        })\r\n    }\r\n\r\n    setFormLyricsheet = event => {\r\n        let formValues = this.state.formValues;\r\n        formValues.lyricsheet = event.target.value;\r\n        this.setState({\r\n            formValues: formValues\r\n        })\r\n    }\r\n\r\n    setFormSongFile = event => {\r\n        let formValues = this.state.formValues;\r\n        formValues.song = event.target.files[0];\r\n        this.setState({\r\n            formValues: formValues\r\n        }) \r\n    }\r\n\r\n    setFormSongName = event => {\r\n        let formValues = this.state.formValues;\r\n        formValues.name = event.target.value;\r\n        this.setState({\r\n            formValues: formValues\r\n        }) \r\n    }\r\n\r\n    logState = () => {\r\n        console.log(this.state.formValues);\r\n    }\r\n\r\n    hideSubmittedInfo = () => {\r\n        this.setState({submitted: false});\r\n    }\r\n\r\n    renderFormResponse = () => {\r\n        console.log('render form response');\r\n        let errkey = \"errors\";\r\n        if((errkey in this.state.formResponse)) {\r\n            // let errs = this.state.formResponse.errors\r\n            let errs = [];\r\n\r\n\r\n            // console.log(typeof this.state.formResponse.errors)\r\n            Object.keys(this.state.formResponse.errors).forEach(key => {\r\n                errs.push(this.state.formResponse.errors[key].message);\r\n            })\r\n\r\n\r\n            return ( \r\n                <div className=\"SubmitSong__SubmitInfo\" >\r\n                    <div className=\"SubmitSong__SubmitInfo__List\">\r\n                    <ul>\r\n\r\n                        { errs.map((item, i) => {\r\n                            return <li key={i}>{item}</li>\r\n                        })}\r\n                    </ul>\r\n                    </div>\r\n\r\n                    <div className=\"SubmitSong__SubmitInfo__exit\" onClick={this.hideSubmittedInfo}><a aria-label=\"Close Error Notification Box\">&times;</a></div>\r\n\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n\r\n\r\n            let { name, music, lyrics, vocals} = this.state.formResponse.data;\r\n            let successResponse = `Song: \"${name}\" successfully submitted for ${music}, ${lyrics}, and ${vocals}.`;\r\n            return ( \r\n            \r\n          <div className=\"SubmitSong__SubmitSuccess\" >\r\n              <div className=\"SubmitSong__SubmitSuccess__Message\">\r\n                  { successResponse }\r\n            </div>\r\n\r\n            <div className=\"SubmitSong__SubmitInfo__exit\" onClick={this.hideSubmittedInfo}><a aria-label=\"Close Success Notification Box\">&times;</a></div>\r\n\r\n        </div>\r\n\r\n            );\r\n\r\n            // return <div className=\"SubmitSong__SubmitInfo\" onClick={this.hideSubmittedInfo}>This is my JSX form response</div>\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n        \r\n        let placeholders = {};\r\n        let formValues = {};\r\n        for(const [key, value] of Object.entries(this.state.formPlaceholders)) placeholders[key] = value;\r\n        for(const [key, value] of Object.entries(this.state.formValues)) formValues[key] = value;\r\n        \r\n        if(this.state.auth === true) {\r\n            return (\r\n                <div className=\"SubmitSong\">\r\n\r\n\r\n                    {this.state.submitted === false ? '': this.renderFormResponse()}\r\n                    <form action=\"/submit\" method=\"POST\">\r\n                    {this.state.uploading === true ? \r\n                        <div className=\"UploadProgress\">\r\n                            {this.state.progressText}\r\n                        <ProgressBar percent={this.state.progress} \r\n                        filledBackground=\"linear-gradient(to right, #ff3019 ,#cf0404)\" \r\n                        unfilledBackground=\"rgba(0,0,0,0)\" >\r\n                      </ProgressBar>\r\n                      </div>\r\n\r\n                    : '' }\r\n                        <h2>Submit a new song</h2>\r\n                        <div className={\"SubmitSong__Formbox \" + this.state.formClass}>\r\n                        <TextInput label=\"Song Name\" placeholder={placeholders.name} name=\"name\" value={formValues.name} propfunction={this.setFormSongName} />\r\n                        {/* <TextInput label=\"Song URL\" type=\"url\" placeholder={placeholders.url} name=\"url\" value={formValues.url} propfunction={this.handleFormUpdate}/> */}\r\n\r\n                        <TextInput label=\"Song file\" placeholder=\"My Greatest hit.mp3\" name=\"song\" type=\"file\" propfunction={this.setFormSongFile} />\r\n                        <TextInput label=\"Musician\" placeholder={placeholders.music} name=\"music\" value={formValues.music} propfunction={this.setFormMusician}/>\r\n                        <TextInput label=\"Lyricist\" placeholder={placeholders.lyrics} name=\"lyrics\" value={formValues.lyrics} propfunction={this.setFormLyricist}/>\r\n                        <TextInput label=\"Vocalist\" placeholder={placeholders.vocals} name=\"vocals\" value={formValues.vocals} propfunction={this.setFormVocals}/>\r\n                        <TextInput label=\"Lyrics\" type=\"textarea\" placeholder={placeholders.lyricsheet} name=\"lyricsheet\" value={formValues.lyricsheet} propfunction={this.setFormLyricsheet}/>\r\n                        <div>\r\n                        <button className=\"SubmitSong__Formbox__Button\" onClick={this.handleSongSubmit}>Submit</button>\r\n  \r\n                        </div>\r\n                        </div>\r\n\r\n                        {/* <div>{this.state.content}</div> */}\r\n        \r\n                        \r\n                    </form>\r\n                \r\n        \r\n                </div>\r\n            );\r\n        } \r\n        \r\n        else {\r\n            return (\r\n            <div className=\"SubmitSong\">\r\n                <h4>{this.state.content}</h4>\r\n            </div>\r\n        )\r\n\r\n        } \r\n    }\r\n}\r\n\r\n\r\n\r\nexport default SubmitSong;","import React, { Component } from 'react';\r\nimport '../SubmitSong/SubmitSong.css';\r\nimport './SongEditor.css';\r\nimport TextInput from '../TextInput/TextInput';\r\nimport he from 'he';\r\n\r\n\r\nclass SongEditor extends Component {\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            content: 'You must be logged in to do that.',\r\n            submitted: false,\r\n            formResponse: '',\r\n            formValues: {\r\n                name: '',\r\n                url: '',\r\n                music: '',\r\n                lyrics: '',\r\n                vocals: '',\r\n                lyricsheet: '',\r\n                votes: '',\r\n                musicvote: '',\r\n                lyricsvote: '',\r\n                vocalsvote: '',\r\n                number: '0'\r\n            },\r\n            auth: false\r\n\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        console.log(\"Song editor initialized\");\r\n        // console.log(this.props);\r\n        // alert(\"Hi\");\r\n        this.sessionCheck();\r\n\r\n        this.getSongByID();\r\n\r\n    }\r\n\r\n    sessionCheck = () => {\r\n\r\n        let url = \"https://danieledminster.com:8080/sessioncheck\";\r\n        fetch(url, { \r\n                credentials: \"include\", \r\n        })\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            console.log(\"Fetch Response: \", res);\r\n\r\n\r\n            \r\n            if(\"key\" in res && this.state.auth === false) {\r\n                this.setState({\r\n                    auth: true,\r\n                    username: res.key,\r\n                    access_token: res.tokens.access_token,\r\n                    refresh_token: res.tokens.refresh_token,\r\n                    expiry: res.tokens.expires_at,\r\n                    expirySeconds: res.tokens.expires_in\r\n                });\r\n\r\n                this.setState({ auth: true} );\r\n            }\r\n            else {\r\n\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    handleSongSubmit = (event) => {\r\n        event.preventDefault();\r\n        // console.log(event);\r\n\r\n\r\n        if(this.validURL(this.state.formValues.url))\r\n        {\r\n            let baseURL = 'https://danieledminster.com:8080/update/';\r\n            let id = this.props.match.params.id;\r\n            let fullURL = baseURL+id;\r\n            // alert(event.target.textContent);\r\n\r\n\r\n            console.log(this.state.formValues);\r\n            console.log(fullURL)\r\n            fetch(fullURL, {\r\n                method: 'PATCH',\r\n                credentials: 'include',\r\n                body: JSON.stringify(this.state.formValues),\r\n                headers: {\r\n                    'Content-type': 'application/json'\r\n                }\r\n\r\n            }).then(res => res.json())\r\n            .then(res => {\r\n                console.log(res);\r\n                this.setState({\r\n                    submitted: true,\r\n                    formResponse: res\r\n                })\r\n            })\r\n            .catch(err => { \r\n                    console.log(err);\r\n            })\r\n        }\r\n        else {\r\n            this.setState({\r\n                submitted: true,\r\n                formResponse: {\r\n                    errors: {\r\n                        url: {\r\n                            message: 'Invalid Song URL'\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    validURL = (str) => {\r\n        //https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url\r\n\r\n        var pattern = new RegExp('^(https?:\\\\/\\\\/)?'+ // protocol\r\n          '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|'+ // domain name\r\n          '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))'+ // OR ip (v4) address\r\n          '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*'+ // port and path\r\n          '(\\\\?[;&a-z\\\\d%_.~+=-]*)?'+ // query string\r\n          '(\\\\#[-a-z\\\\d_]*)?$','i'); // fragment locator\r\n        return !!pattern.test(str);\r\n      }\r\n\r\n    getSongByID = () => {\r\n        let id = this.props.match.params.id;\r\n        let baseURL = \"https://danieledminster.com:8080/song/id/\";\r\n        let fullURL = baseURL+id;\r\n\r\n        fetch(fullURL, {\r\n            credentials: 'include',\r\n            method: 'get'\r\n        }).then(res => res.json())\r\n        .then(res => {\r\n            console.log(res);\r\n            this.setState({\r\n                song: res,\r\n                formValues: res\r\n            })\r\n        })\r\n    }\r\n\r\n    handleFormUpdate = (event) => {\r\n        // console.log(event.target.name);\r\n        let {name, value} = event.target;\r\n        let hFUformValues = {};\r\n        // console.log(value);\r\n\r\n        for(const [k, v] of Object.entries(this.state.formValues)) { \r\n            // currentFormValues[k] = v;\r\n            if(k === name) {\r\n                \r\n                k === 'lyricsheet' ? hFUformValues[k] = he.encode(value): hFUformValues[k] = value;\r\n                \r\n            }\r\n            else {\r\n                k === 'lyricsheet' ? hFUformValues[k] = he.encode(v) : hFUformValues[k] = v;\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            formValues: hFUformValues\r\n        }, this.logState);\r\n\r\n    }\r\n\r\n    logState = () => {\r\n        console.log(this.state.formValues);\r\n    }\r\n\r\n    hideSubmittedInfo = () => {\r\n        this.setState({submitted: false});\r\n    }\r\n\r\n    renderFormResponse = () => {\r\n        let errkey = \"errors\";\r\n        if((errkey in this.state.formResponse)) {\r\n            // let errs = this.state.formResponse.errors\r\n            let errs = [];\r\n\r\n\r\n            // console.log(typeof this.state.formResponse.errors)\r\n            Object.keys(this.state.formResponse.errors).forEach(key => {\r\n                errs.push(this.state.formResponse.errors[key].message);\r\n            })\r\n\r\n\r\n            return ( \r\n                <div className=\"SubmitSong__SubmitInfo\" >\r\n                    <div className=\"SubmitSong__SubmitInfo__List\">\r\n                    <ul>\r\n\r\n                        { errs.map((item, i) => {\r\n                            return <li key={i}>{item}</li>\r\n                        })}\r\n                    </ul>\r\n                    </div>\r\n\r\n                    <div className=\"SubmitSong__SubmitInfo__exit\" onClick={this.hideSubmittedInfo}><a aria-label=\"Close Error Notification Box\">&times;</a></div>\r\n\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n\r\n\r\n            let { name, music, lyrics, vocals} = this.state.formResponse;\r\n            let successResponse = `Song: \"${name}\" successfully updated for ${music}, ${lyrics}, and ${vocals}.`;\r\n            return ( \r\n            \r\n          <div className=\"SubmitSong__SubmitSuccess\" >\r\n              <div className=\"SubmitSong__SubmitSuccess__Message\">\r\n                  { successResponse }\r\n            </div>\r\n\r\n            <div className=\"SubmitSong__SubmitInfo__exit\" onClick={this.hideSubmittedInfo}><a aria-label=\"Close Success Notification Box\">&times;</a></div>\r\n\r\n        </div>\r\n\r\n            );\r\n\r\n            // return <div className=\"SubmitSong__SubmitInfo\" onClick={this.hideSubmittedInfo}>This is my JSX form response</div>\r\n        }\r\n    }\r\n\r\n    \r\n    render() {\r\n        // console.log();\r\n\r\n        let formValues = {};\r\n        for(const [key, value] of Object.entries(this.state.formValues)) formValues[key] = value;\r\n\r\n        \r\n        if(this.state.auth === true) {\r\n            return (\r\n                <div className=\"SongEditor\">\r\n                        {/* {this.props.match.params} */}\r\n                    \r\n                        {this.state.submitted === false ? '': this.renderFormResponse()}\r\n                        {(\"song\" in this.state ) ? \r\n\r\n                        <>\r\n                        <form action=\"/edit\" method=\"PATCH\">\r\n                        <TextInput name=\"name\" label=\"Song Name\" placeholder={this.state.song.name} propfunction={this.handleFormUpdate} /> \r\n                        <TextInput name=\"url\" label=\"URL\" placeholder={this.state.song.url} propfunction={this.handleFormUpdate} /> \r\n                        <TextInput name=\"music\" label=\"Musician\" placeholder={this.state.song.music} propfunction={this.handleFormUpdate} /> \r\n                        <TextInput name=\"lyrics\" label=\"Lyricist\" placeholder={this.state.song.lyrics} propfunction={this.handleFormUpdate} /> \r\n                        <TextInput name=\"lyrics\" label=\"Vocals\" placeholder={this.state.song.vocals} propfunction={this.handleFormUpdate} />\r\n                        <TextInput name=\"lyricsheet\" label=\"Lyricsheet\" value={he.decode(this.state.song.lyricsheet)} type=\"textarea\" propfunction={this.handleFormUpdate} />\r\n                        <div className=\"SongEditor__Votesbox\">\r\n                        <TextInput name=\"votes\" label=\"Track Votes\" placeholder={this.state.song.votes} propfunction={this.handleFormUpdate} /> \r\n                        <TextInput name=\"musicvote\" label=\"Music Votes\" placeholder={this.state.song.musicvote} propfunction={this.handleFormUpdate} /> \r\n                        <TextInput name=\"lyricsvote\" label=\"Lyrics Votes\" placeholder={this.state.song.lyricsvote} propfunction={this.handleFormUpdate} /> \r\n                        <TextInput name=\"vocalsvote\" label=\"Vocals Votes\" placeholder={this.state.song.vocalsvote} propfunction={this.handleFormUpdate} />\r\n                    \r\n                        </div>\r\n                        <div className=\"SongEditor__Submit\">\r\n                        <button className=\"SongEditor__Button\" onClick={this.handleSongSubmit}>Submit</button>\r\n                        </div>\r\n                        </form>\r\n                        </>\r\n                        : '' }   \r\n\r\n                </div>\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <div className=\"SongEditor\"><h3>{this.state.content}</h3></div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default SongEditor;","import React, { Component } from 'react';\r\nimport he from 'he';\r\nimport './AdminSongDisplay.css';\r\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\r\nimport SongEditor from '../SongEditor/SongEditor';\r\nimport ReactLoading from 'react-loading';\r\n\r\nclass AdminSongDisplay extends Component {\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            auth: false,\r\n            // songs: ''\r\n        }\r\n\r\n        // let notifClassList = ' ';\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        let url = 'https://danieledminster.com:8080/all/desc';\r\n        fetch(url)\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            // console.log(res);\r\n            this.setState({\r\n                songs: res\r\n            })\r\n        })\r\n\r\n    }\r\n\r\n    deleteSong = (event) => {\r\n        let songID = event.target.getAttribute(\"data-id\");\r\n\r\n        if(window.confirm(\"Are you sure you want to delete this song?\")) {\r\n            let url = `https://danieledminster.com:8080/delete/${songID}`;\r\n            fetch(url, { \r\n                method: 'DELETE',\r\n                credentials: 'include'\r\n             \r\n            }).then(res => res.json())\r\n            .then(res => {\r\n                // lsongsArray = this.state.songs;\r\n\r\n                // const index = songsArray.indexOf(songID);\r\n\r\n\r\n                let songsArray = this.state.songs;\r\n                let index = -1;\r\n                for(let i=0;i<songsArray.length;i++) {\r\n                    if(songsArray[i]._id === songID) {\r\n                        index = i;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                songsArray.splice(index, 1);\r\n                this.setState({\r\n                    songs: songsArray,\r\n                    deletedSong: true,\r\n                    jsonResponse: res.response\r\n                });\r\n            })\r\n\r\n            // console.log(\"songarray\", songsArray)\r\n            // const index = songsArray.indexOf(songID);\r\n            // console.log(index);\r\n        }\r\n    }\r\n\r\n    showDeletedResponse() {\r\n\r\n            return (\r\n                <div className=\"AdminSongDisplay__MessageSuccess\">\r\n                    <div className=\"AdminSongDisplay__MessageSuccess__Message\">{this.state.jsonResponse}</div><div className=\"AdminSongDisplay__MessageSuccess__X\"><a onClick={this.hideNotification} aria-label=\"Close Success Notification Box\">&times;</a></div>\r\n                </div>\r\n            );\r\n\r\n    }\r\n\r\n    hideNotification = () => {\r\n        // this.showDeletedResponse(' leaving');\r\n        this.setState({deletedSong: false});\r\n    }\r\n\r\n    render() {\r\n        \r\n        // console.log(this.state.songs);\r\n        return (\r\n            <div className=\"AdminSongDisplayContainer\">\r\n\r\n        { this.state.deletedSong === true ? this.showDeletedResponse() : '' }\r\n\r\n            {/* {this.state.songs.map((item, i) => {\r\n                return <div className=\"AdminSongDisplay__Item\"></div>\r\n            })} */}\r\n\r\n            <div className=\"AdminSongDisplay__Titlebar\">\r\n                <div className=\"AdminSongDisplay__Titlebar__Round\">#</div>\r\n                <div className=\"AdminSongDisplay__Titlebar__Name\">Name</div>\r\n                <div className=\"AdminSongDisplay__Titlebar__Musician\">Musician</div>\r\n                <div className=\"AdminSongDisplay__Titlebar__Lyricist\">Lyricist</div>\r\n                <div className=\"AdminSongDisplay__Titlebar__Vocalist\">Vocalist</div>\r\n                <div className=\"AdminSongDisplay__Titlebar__Vote\">T</div>\r\n                <div className=\"AdminSongDisplay__Titlebar__Vote\">M</div>\r\n                <div className=\"AdminSongDisplay__Titlebar__Vote\">L</div>\r\n                <div className=\"AdminSongDisplay__Titlebar__Vote\">V</div>\r\n                <div className=\"AdminSongDisplay__Titlebar__Delete\">Delete</div>\r\n                \r\n\r\n            </div>\r\n            {\r\n                (\"songs\" in this.state ) ?  this.state.songs.map((item, i) => { \r\n                    return ( \r\n                        <div key={i} className=\"AdminSongDisplay__Item\">\r\n                            <div className=\"AdminSongDisplay__Item__Round\">{item.round}</div>\r\n                            <div className=\"AdminSongDisplay__Item__Name\"><Link to={`/admin/edit/${item._id}`}>{he.decode(item.name)}</Link></div>\r\n                            <div className=\"AdminSongDisplay__Item__Musician\">{item.music}</div>\r\n                            <div className=\"AdminSongDisplay__Item__Lyricist\">{item.lyrics}</div>\r\n                            <div className=\"AdminSongDisplay__Item__Vocalist\">{item.vocals}</div>\r\n                            <div className=\"AdminSongDisplay__Item__Vote\">{item.votes}</div>\r\n                            <div className=\"AdminSongDisplay__Item__Vote\">{item.musicvote}</div>\r\n                            <div className=\"AdminSongDisplay__Item__Vote\">{item.lyricsvote}</div>\r\n                            <div className=\"AdminSongDisplay__Item__Vote\">{item.vocalsvote}</div>\r\n                            <div className=\"AdminSongDisplay__Item__Delete\"><a aria-label=\"Close Success Notification Box\" data-id={item._id} onClick={this.deleteSong}>X</a></div>\r\n                        </div> )\r\n                }) :                 \r\n                \r\n                <div className=\"MyLoader\">\r\n                <ReactLoading type=\"spin\" color=\"#7c61f7\" height={'5%'} width={'5%'} /> \r\n                </div>\r\n            }\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default AdminSongDisplay;","import React, { Component } from 'react';\r\nimport './Bandit.css';\r\n// import Songs from '../data/songs.json';\r\nimport he from 'he';\r\nimport axios from 'axios';\r\nimport ReactLoading from 'react-loading';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nclass SongDisplay extends Component {\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = { \r\n            Songs: [], \r\n            loading: true,\r\n            songJSX: ''\r\n        };\r\n    }\r\n\r\n    convertToTrophy = number => {\r\n        if(number == null) {\r\n            return \"\";\r\n        } \r\n        else if (parseInt(number) === 1)\r\n        {\r\n            return <span className=\"material-icons\">emoji_events</span>\r\n        }\r\n\r\n    }\r\n\r\n    getSongList = () => {\r\n        let bandit = this.props.match.params.user;\r\n        console.log('starting song api request');\r\n        axios.get(`https://danieledminster.com:8080/user/${bandit}`)\r\n        .then(res => {\r\n            console.log(\"bandit songs axios: \", res);\r\n            this.setState({ Songs: res.data }, this.getSongJSX);    \r\n        });\r\n    }\r\n\r\n    componentDidMount(){\r\n        console.log('bandit display rendered', this.props);\r\n        this.getSongList();\r\n    }\r\n\r\n\r\n    getSongJSX = () => {\r\n        let JSX = this.state.Songs.map((song, i) => {\r\n\r\n            let trackTrophy = this.convertToTrophy(song.winner);\r\n                    return(\r\n\r\n                        <div key={i} className=\"SongDisplay__Item\">\r\n                            \r\n                                            <div className=\"SongDisplay__Item__PlayIcon\" >\r\n                                                <span className=\"material-icons\" \r\n                                                onClick={this.props.play} \r\n                                                data-musicSrc={song.streamurl}\r\n                                                data-name={song.name}\r\n                                                data-artists={`${song.music}, ${song.lyrics}, ${song.vocals}`}>\r\n                play_circle_filled\r\n                </span></div>\r\n\r\n                <div className=\"SongDisplay__Item__PlayListAdd\"><span className=\"material-icons\">\r\n                playlist_add\r\n                </span></div>\r\n            \r\n                            <div className=\"SongDisplay__Item__Round\">{song.round}</div>\r\n                            <div className=\"SongDisplay__Item__Name\">{he.decode(song.name)}</div>\r\n                            <div className=\"SongDisplay__Item__TrackWin\">\r\n                            {trackTrophy}\r\n                                </div>\r\n                                <div className=\"SongDisplay__Item__TrackVotes\">{song.votes}</div>\r\n                            <div className=\"SongDisplay__Item__Musician\"><Link to={`/bandit/${song.music}`} className=\"ProfileLink\" onClick={this.forceUpdate}>{song.music}</Link></div>\r\n                            <div className=\"SongDisplay__Item__MusicVotes\">{song.musicvote}</div>\r\n                            <div className=\"SongDisplay__Item__Lyricist\"><Link to={`/bandit/${song.lyrics}`} className=\"ProfileLink\" onClick={this.forceUpdate}>{song.lyrics}</Link></div>\r\n                            <div className=\"SongDisplay__Item__LyricVotes\">{song.lyricsvote}</div>\r\n                            <div className=\"SongDisplay__Item__Vocals\"><Link to={`/bandit/${song.vocals}`} className=\"ProfileLink\" onClick={this.forceUpdate}>{song.vocals}</Link></div>\r\n                            <div className=\"SongDisplay__Item__VocalVotes\">{song.vocalsvote}</div>\r\n                            \r\n                            \r\n                            \r\n                        </div>\r\n                    );\r\n            });\r\n\r\n            this.setState({ songJSX: JSX });\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            \r\n                <>\r\n                {this.state.songJSX === '' ? \r\n                <div className=\"MyLoader\">\r\n                <ReactLoading type=\"spin\" color=\"#7c61f7\" height={'5%'} width={'5%'} /> \r\n                </div>\r\n                \r\n                : \r\n                \r\n                <div className=\"SongDisplay\">\r\n                {this.state.songJSX}\r\n                </div>\r\n                \r\n                }\r\n                </>\r\n                \r\n        );\r\n    }\r\n}\r\n\r\nexport default SongDisplay;","import React, { useState, Component } from 'react';\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\nimport './App.css';\n// import songs from './data/songs.json';\nimport Navbar from './Navbar/Navbar';\nimport SongDisplay from './SongDisplay/SongDisplay';\nimport SubmitSong from './SubmitSong/SubmitSong';\n// import Admin from './Admin/Admin';\nimport AdminSongDisplay from './AdminSongDisplay/AdminSongDisplay';\nimport SongEditor from './SongEditor/SongEditor';\nimport Bandit from './Bandit/Bandit';\n// import AudioPlayer from './AudioPlayer/AudioPlayer';\n// require('wavesurfer.js');\nimport ReactJkMusicPlayer from \"react-jinke-music-player\";\nimport \"react-jinke-music-player/assets/index.css\";\n\n\n\nclass App extends Component {\n  constructor() {\n      super();\n\n      this.state = {\n        auth: false,\n        content: 'You must be logged in to do that.',\n        playerActive: false\n      }\n  }\n\n  componentDidMount(){\n    this.sessionCheck();\n  }\n\n  startPlayer = event => {\n    // console.log('player', this.state, event.target);\n\n    console.log(event.target.getAttribute('data-name'),event.target.getAttribute('data-artists'), event.target.getAttribute('data-musicsrc'));\n    if(!this.state.playerActive) {\n        this.setState({ playerActive: true, \n          opts: {\n            mode: 'full',\n            toggleMode: false,\n            autoHiddenCover: true,\n            glassBg: true,\n            // showPlayMode: false,\n            showThemeSwitch: false,\n            showDownload: false,\n            preload: true,\n          },\n          audio:  [{\n            name: event.target.getAttribute('data-name'),\n            singer: event.target.getAttribute('data-artists'),\n            musicSrc: event.target.getAttribute('data-musicsrc')\n          }]\n        });\n          \n        \n    }\n    else {\n      this.setState({ \n        audioList: {\n          name: event.target['data-name'],\n          singer: event.target['data-artists'],\n          musicSrc: event.target['data-url']\n        }\n      })\n    }\n    \n  }\n\n  play = event => {\n      // this.setState({ currentSong: event.target['data-url']})\n  }\n\n  sessionCheck = () => {\n\n    let url = \"https://danieledminster.com:8080/sessioncheck\";\n    fetch(url, { \n            credentials: \"include\", \n    })\n    .then(res => res.json())\n    .then(res => {\n        console.log(\"Fetch Response: \", res);\n\n        if(\"key\" in res && this.state.auth === false) {\n            this.setState({\n                auth: true,\n                username: res.key,\n                access_token: res.tokens.access_token,\n                refresh_token: res.tokens.refresh_token,\n                expiry: res.tokens.expires_at,\n                expirySeconds: res.tokens.expires_in\n            });\n\n            this.setState({ auth: true} );\n        }\n        else {\n\n        }\n\n    });\n}\n\n\n\n  render() {\n    \n      return (\n        <div className=\"App\">\n          <Router>\n          <Navbar />\n          <Switch>\n            <Route exact path=\"/\"  render={() => <SongDisplay play={this.startPlayer} />}/>\n            <Route exact path=\"/submitsong\"  component={SubmitSong}/>\n            <Route  exact path=\"/bandit/:user\" render={routerProps => <Bandit {...routerProps} {...this.state} /> }  />\n            \n            {/* <Route exact path=\"/admin\"  component={Admin}/> */}\n          {/* <SongDisplay /> */}\n\n\n          {this.state.auth === true ? \n            <Route path=\"/admin\">\n            <div className=\"AdminContainer\">\n                    <div className=\"AdminMenuBar\">\n                      <div className=\"AdminMenuBar__Header\"> Moderator Functions</div>\n                    <div className=\"AdminMenuBar__Link\"><Link to=\"/admin\">Song List View</Link></div>\n                    <div className=\"AdminMenuBar__Link\">Round List View</div>\n                    </div>\n              <Switch>\n               \n                <Route  path=\"/admin/edit/:id\" render={routerProps => <SongEditor {...routerProps} /> }  />\n                \n                <Route exact path=\"/admin\" component={AdminSongDisplay} />         \n               \n              </Switch>          \n           \n            </div>\n\n            </Route> \n            \n            : \n            \n            <Route path=\"/admin\">\n               {/* <div className=\"AdminContainer\"> */}\n              <h3 className=\"Nope\">{this.state.content}</h3>\n              {/* </div> */}\n               </Route> }\n\n\n\n          </Switch>\n          {this.state.playerActive === true ? \n          \n            \n            <ReactJkMusicPlayer {...this.state.opts} audioLists={this.state.audio} />\n          :\n            '' \n          }\n\n          </Router>\n          {/* <AudioPlayer url=\"https://api.soundcloud.com/tracks/797171077/stream\" /> */}\n\n      \n        \n        </div>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n// import 'bootstrap/dist/css/bootstrap.min.css';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}