{"version":3,"sources":["img/GOBLogo-Clean.png","Navbar/Navbar.js","SongDisplay/SongDisplay.js","TextInput/TextInput.js","SubmitSong/SubmitSong.js","SongEditor/SongEditor.js","AdminSongDisplay/AdminSongDisplay.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","sessionCheck","fetch","credentials","then","res","json","console","log","state","auth","setState","username","key","access_token","tokens","refresh_token","expiry","expires_at","expirySeconds","expires_in","getUserLinks","userLinkArray","name","href","class","linkarray","logoutOverride","event","preventDefault","delete_cookie","window","location","document","cookie","renderLinkArray","map","item","i","className","onClick","to","this","src","Logo","alt","target","Component","SongDisplay","convertToTrophy","number","parseInt","Songs","reverse","song","trackTrophy","winner","round","he","decode","votes","music","musicvote","lyrics","lyricsvote","vocals","vocalsvote","TextInput","props","label","ph","type","propvalue","propfunction","placeholder","value","required","onChange","SubmitSong","validURL","str","RegExp","test","handleSongSubmit","formValues","url","method","body","JSON","stringify","headers","submitted","formResponse","errors","message","handleFormUpdate","hFUformValues","Object","entries","k","v","logState","hideSubmittedInfo","renderFormResponse","errs","keys","forEach","push","aria-label","successResponse","content","formPlaceholders","lyricsheet","placeholders","action","SongEditor","fullURL","match","params","id","catch","err","getSongByID","encode","AdminSongDisplay","deleteSong","songID","getAttribute","confirm","songsArray","songs","index","length","_id","splice","deletedSong","jsonResponse","response","hideNotification","showDeletedResponse","data-id","App","exact","path","component","render","routerProps","Boolean","hostname","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.e942becd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/GOBLogo-Clean.7ef2f3f7.png\";","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Link, Redirect} from 'react-router-dom';\r\nimport Logo from '../img/GOBLogo-Clean.png';\r\nimport './Navbar.css';\r\n\r\nclass Navbar extends Component {\r\n    constructor(){\r\n        super();\r\n\r\n\r\n        let userLinkArray = [{\r\n            name: 'Login',\r\n            href: 'https://danieledminster.com:8080/auth/reddit',\r\n            class: 'Navbar__Flexbox__Right__Item__Button'\r\n        }];\r\n\r\n        this.state = {\r\n            auth: false,\r\n            linkarray: userLinkArray\r\n        };\r\n\r\n        let userLinkJSX = '';\r\n\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.sessionCheck();\r\n\r\n        // this.state.auth === true ? this.getUserLinks(true): this.getUserLinks(false);\r\n    \r\n\r\n    }\r\n\r\n    sessionCheck = () => {\r\n        // let ls = window.localStorage;\r\n\r\n\r\n        let url = \"https://danieledminster.com:8080/sessioncheck\";\r\n        fetch(url, { \r\n                credentials: \"include\", \r\n        })\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            console.log(\"Fetch Response: \", res);\r\n\r\n            // https://www.reddit.com/api/v1/access_token\r\n\r\n            // if(\"tokens\" in res)\r\n            \r\n            if(\"key\" in res && this.state.auth === false) {\r\n                this.setState({\r\n                    auth: true,\r\n                    username: res.key,\r\n                    access_token: res.tokens.access_token,\r\n                    refresh_token: res.tokens.refresh_token,\r\n                    expiry: res.tokens.expires_at,\r\n                    expirySeconds: res.tokens.expires_in\r\n                });\r\n                this.getUserLinks(true);\r\n                // console.log('true');\r\n                // console.log('getuserlinks true');\r\n                // console.log(\"state: \", this.state);\r\n            }\r\n            else {\r\n                this.getUserLinks(false);\r\n                // console.log('false');\r\n            }\r\n\r\n        });\r\n \r\n\r\n    }\r\n\r\n\r\n    getUserLinks = (auth) => {\r\n        // let JSX;\r\n\r\n       \r\n        if(auth === true)\r\n        {\r\n\r\n            console.log(\"getUserLinks\", auth);\r\n            this.userLinkArray = [\r\n                { \r\n                    name: this.state.username,\r\n                    href: `/user/${this.state.username}`,\r\n                    class: 'Navbar__Flexbox__Right__Item'\r\n                },\r\n                {\r\n                    name: 'Admin',\r\n                    href: '/admin',\r\n                    class: 'Navbar__Flexbox__Right__Item'\r\n                },\r\n                {\r\n                    name: 'Submit song',\r\n                    href: '/submitsong',\r\n                    class: 'Navbar__Flexbox__Right__Item__Button'\r\n                },\r\n                {\r\n                    name: 'Logout',\r\n                    href: '/logout',\r\n                    class: 'Navbar__Flexbox__Right__Item'\r\n                }\r\n            ];\r\n\r\n            this.setState({\r\n                linkarray: this.userLinkArray\r\n            })\r\n\r\n\r\n        }\r\n        else {\r\n            this.userLinkArray = [\r\n            { \r\n                name: 'Login',\r\n                href: 'https://danieledminster.com:8080/auth/reddit',\r\n                class: 'Navbar__Flexbox__Right__Item__Button'\r\n            }];\r\n\r\n            this.setState({\r\n                linkarray: this.userLinkArray\r\n            })\r\n\r\n            // this.userLinkJSX = `<div className=\"Navbar__Flexbox__Right__Item\"><Link to=\"127.0.0.1:4000/auth/login\">Login</Link></div>`;\r\n\r\n            // return this.userLinkJSX;\r\n\r\n        }\r\n        // console.log(this.userLinkJSX);\r\n\r\n    }\r\n\r\n    logoutOverride = (event) => {\r\n        event.preventDefault();\r\n        this.delete_cookie(\"__gameofbandsdev\");\r\n        this.sessionCheck();\r\n        this.setState({ auth: false });\r\n        window.location=\"/\";\r\n    \r\n\r\n    }\r\n    \r\n    delete_cookie = (name) => {\r\n        document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';\r\n      }\r\n    renderLinkArray = () => {\r\n        \r\n        return (this.state.linkarray.map((item, i) => {\r\n            if(item.name === 'Login') \r\n                return <div key={i} className={item.class}><a href={item.href}>{item.name}</a></div>\r\n            else if(item.name === 'Logout') \r\n                return <div key={i} className={item.class}><a href={item.href} onClick={this.logoutOverride}>{item.name}</a></div>\r\n            else \r\n                return <div key={i} className={item.class}><Link to={item.href}>{item.name}</Link></div>\r\n            // return <div key={i} className=\"Navbar__Flexbox__Right__Item\"><Link to={item.href}>{item.name}</Link></div>\r\n        }));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <div className=\"Navbar\">\r\n                <div className=\"Navbar__Flexbox__Left\">\r\n                    <div className=\"Navbar__Flexbox__Left__Brand\">\r\n                        <img src={Logo} alt=\"Game of Bands Logo.\" className=\"Navbar__Flexbox__Left__Brand__img\" />\r\n                    </div>\r\n\r\n                    <div className=\"Navbar__Flexbox__Left__Item\">\r\n                        <a href=\"#\">Rounds</a>\r\n                    </div>\r\n\r\n                    <div className=\"Navbar__Flexbox__Left__Item\">\r\n                    <Link to=\"/\">Songs</Link>\r\n                    </div>\r\n\r\n                    <div className=\"Navbar__Flexbox__Left__Item\">\r\n                    <a href=\"https://reddit.com/r/gameofbands\" target=\"_blank\">/r/gameofbands</a>\r\n                    </div>\r\n\r\n                    <div className=\"Navbar__Flexbox__Left__Item\">\r\n                    <a href=\"https://discordapp.com/invite/h7ywF3\">Discord</a>\r\n                    </div>\r\n        \r\n                </div>\r\n\r\n                <div className=\"Navbar__Flexbox__Right\">\r\n         \r\n\r\n                        {/* { console.log(this.state.linkarray) } */}\r\n                        { this.renderLinkArray()}\r\n\r\n                    \r\n\r\n                </div>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navbar;","import React, { Component } from 'react';\r\nimport './SongDisplay.css';\r\nimport Songs from '../data/songs.json';\r\nimport he from 'he';\r\n\r\nclass SongDisplay extends Component {\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {};\r\n    }\r\n\r\n    convertToTrophy = number => {\r\n        if(number == null) {\r\n            return \"\";\r\n        } \r\n        else if (parseInt(number) === 1)\r\n        {\r\n            return <span className=\"material-icons\">emoji_events</span>\r\n        }\r\n\r\n    }\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"SongDisplay\">\r\n            \r\n                {Songs.reverse().map((song, i) => {\r\n\r\n                    let trackTrophy = this.convertToTrophy(song.winner);\r\n                    return(\r\n\r\n                        <div key={i} className=\"SongDisplay__Item\">\r\n                            \r\n                                            <div className=\"SongDisplay__Item__PlayIcon\"><span className=\"material-icons\">\r\n                play_circle_filled\r\n                </span></div>\r\n\r\n                <div className=\"SongDisplay__Item__PlayListAdd\"><span className=\"material-icons\">\r\n                playlist_add\r\n                </span></div>\r\n              \r\n                            <div className=\"SongDisplay__Item__Round\">{song.round}</div>\r\n                            <div className=\"SongDisplay__Item__Name\">{he.decode(song.name)}</div>\r\n                            <div className=\"SongDisplay__Item__TrackWin\">\r\n                            {trackTrophy}\r\n        \r\n                                {/* {song.winner} */}\r\n                                </div>\r\n                            <div className=\"SongDisplay__Item__TrackVotes\">{song.votes}</div>\r\n                            <div className=\"SongDisplay__Item__Musician\">{song.music}</div>\r\n                            <div className=\"SongDisplay__Item__MusicVotes\">{song.musicvote}</div>\r\n                            <div className=\"SongDisplay__Item__Lyricist\">{song.lyrics}</div>\r\n                            <div className=\"SongDisplay__Item__LyricVotes\">{song.lyricsvote}</div>\r\n                            <div className=\"SongDisplay__Item__Vocals\">{song.vocals}</div>\r\n                            <div className=\"SongDisplay__Item__VocalVotes\">{song.vocalsvote}</div>\r\n                            \r\n                            \r\n                            \r\n                            \r\n                        </div>\r\n                    );\r\n                })}\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SongDisplay;","import React from 'react';\r\nimport './TextInput.css';\r\n\r\nconst TextInput = (props) => {\r\n    let label, ph, name, type, propvalue, propfunction;\r\n    if(props.label)  label = props.label;\r\n    if(props.placeholder)  ph = props.placeholder;\r\n    if(props.name)  name = props.name;\r\n    if(props.value) propvalue = props.value;\r\n    if(props.propfunction) propfunction = props.propfunction; \r\n    props.type == null  ? type=\"text\" : type = props.type;\r\n\r\n    if(type !== \"textarea\") {\r\n\r\n        return(\r\n            <div className=\"TextInput\">\r\n            <label>{label}:</label>\r\n            <div>\r\n            <input type={type} placeholder={ph} name={name} className=\"SubmitSongForm\" required value={propvalue} onChange={propfunction} /> \r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n    else {\r\n        return(\r\n            <div className=\"TextInput\">\r\n            <label>{label}:</label>\r\n            <div>\r\n            <textarea name={name} className=\"SubmitSongForm\" placeholder={ph} required onChange={propfunction}>{propvalue}</textarea> \r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TextInput;\r\n","import React, { Component } from 'react';\r\nimport TextInput from '../TextInput/TextInput';\r\nimport './SubmitSong.css';\r\nimport axios from 'axios';\r\nimport e from 'cors';\r\nclass SubmitSong extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        // let content = 'You must be logged in to do that.';\r\n\r\n        // if(this.props.username) this.content = '';\r\n        this.state = {\r\n            content: 'You must be logged in to do that.',\r\n            submitted: false,\r\n            formResponse: '',\r\n            formPlaceholders: {\r\n                name: 'Never Gonna Give You Up',\r\n                url: 'https://soundcloud.com/doomgrip776/rick-astley-never-gonna-give-you-up-airhorn-remix',\r\n                music: 'BedroomProducer',\r\n                lyrics: 'DistinguishedWriter',\r\n                vocals: 'AntiVoxxer',\r\n                lyricsheet: 'I wrote you but you still ain\\'t callin\\''\r\n            },\r\n            formValues: {\r\n                name: '',\r\n                url: '',\r\n                music: '',\r\n                lyrics: '',\r\n                vocals: '',\r\n                lyricsheet: ''\r\n            },\r\n            auth: false\r\n\r\n        }\r\n\r\n       \r\n    }\r\n\r\n    componentDidMount() {\r\n        this.sessionCheck();\r\n        // this.content = 'You must be logged in to do that.';\r\n    }\r\n\r\n    sessionCheck = () => {\r\n        // let ls = window.localStorage;\r\n\r\n\r\n        let url = \"https://danieledminster.com:8080/sessioncheck\";\r\n        fetch(url, { \r\n                credentials: \"include\", \r\n        })\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            console.log(\"Fetch Response: \", res);\r\n\r\n\r\n            \r\n            if(\"key\" in res && this.state.auth === false) {\r\n                this.setState({\r\n                    auth: true,\r\n                    username: res.key,\r\n                    access_token: res.tokens.access_token,\r\n                    refresh_token: res.tokens.refresh_token,\r\n                    expiry: res.tokens.expires_at,\r\n                    expirySeconds: res.tokens.expires_in\r\n                });\r\n\r\n                this.setState({ auth: true} );\r\n            }\r\n            else {\r\n\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    validURL = (str) => {\r\n        //https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url\r\n\r\n        var pattern = new RegExp('^(https?:\\\\/\\\\/)?'+ // protocol\r\n          '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|'+ // domain name\r\n          '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))'+ // OR ip (v4) address\r\n          '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*'+ // port and path\r\n          '(\\\\?[;&a-z\\\\d%_.~+=-]*)?'+ // query string\r\n          '(\\\\#[-a-z\\\\d_]*)?$','i'); // fragment locator\r\n        return !!pattern.test(str);\r\n      }\r\n\r\n    handleSongSubmit = (event) => {\r\n        event.preventDefault();\r\n        // console.log(event);\r\n\r\n\r\n        if(this.validURL(this.state.formValues.url))\r\n        {\r\n            let url = 'https://gameofbands.danieledminster.com:8080/create';\r\n            // alert(event.target.textContent);\r\n\r\n            console.log(this.state.formValues);\r\n\r\n            fetch(url, {\r\n                method: 'post',\r\n                credentials: 'include',\r\n                body: JSON.stringify(this.state.formValues),\r\n                headers: {\r\n                    'Content-type': 'application/json'\r\n                }\r\n\r\n            }).then(res => res.json())\r\n            .then(res => {\r\n                console.log(res);\r\n                this.setState({\r\n                    submitted: true,\r\n                    formResponse: res\r\n                })\r\n            })\r\n        }\r\n        else {\r\n            this.setState({\r\n                submitted: true,\r\n                formResponse: {\r\n                    errors: {\r\n                        url: {\r\n                            message: 'Invalid Song URL'\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    handleFormUpdate = (event) => {\r\n        // console.log(event.target.name);\r\n        let {name, value} = event.target;\r\n        let hFUformValues = {};\r\n        // console.log(value);\r\n\r\n        for(const [k, v] of Object.entries(this.state.formValues)) { \r\n            // currentFormValues[k] = v;\r\n            if(k === name) {\r\n                hFUformValues[k] = value;\r\n            }\r\n            else {\r\n                hFUformValues[k] = v;\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            formValues: hFUformValues\r\n        }, this.logState);\r\n\r\n    }\r\n\r\n    logState = () => {\r\n        console.log(this.state.formValues);\r\n    }\r\n\r\n    hideSubmittedInfo = () => {\r\n        this.setState({submitted: false});\r\n    }\r\n\r\n    renderFormResponse = () => {\r\n        let errkey = \"errors\";\r\n        if((errkey in this.state.formResponse)) {\r\n            // let errs = this.state.formResponse.errors\r\n            let errs = [];\r\n\r\n\r\n            // console.log(typeof this.state.formResponse.errors)\r\n            Object.keys(this.state.formResponse.errors).forEach(key => {\r\n                errs.push(this.state.formResponse.errors[key].message);\r\n            })\r\n\r\n\r\n            return ( \r\n                <div className=\"SubmitSong__SubmitInfo\" >\r\n                    <div className=\"SubmitSong__SubmitInfo__List\">\r\n                    <ul>\r\n\r\n                        { errs.map((item, i) => {\r\n                            return <li key={i}>{item}</li>\r\n                        })}\r\n                    </ul>\r\n                    </div>\r\n\r\n                    <div className=\"SubmitSong__SubmitInfo__exit\" onClick={this.hideSubmittedInfo}><a aria-label=\"Close Error Notification Box\">&times;</a></div>\r\n\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n\r\n\r\n            let { name, music, lyrics, vocals} = this.state.formResponse;\r\n            let successResponse = `Song: \"${name}\" successfully submitted for ${music}, ${lyrics}, and ${vocals}.`;\r\n            return ( \r\n            \r\n          <div className=\"SubmitSong__SubmitSuccess\" >\r\n              <div className=\"SubmitSong__SubmitSuccess__Message\">\r\n                  { successResponse }\r\n            </div>\r\n\r\n            <div className=\"SubmitSong__SubmitInfo__exit\" onClick={this.hideSubmittedInfo}><a aria-label=\"Close Success Notification Box\">&times;</a></div>\r\n\r\n        </div>\r\n\r\n            );\r\n\r\n            // return <div className=\"SubmitSong__SubmitInfo\" onClick={this.hideSubmittedInfo}>This is my JSX form response</div>\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n\r\n        let placeholders = {};\r\n        let formValues = {};\r\n        for(const [key, value] of Object.entries(this.state.formPlaceholders)) placeholders[key] = value;\r\n        for(const [key, value] of Object.entries(this.state.formValues)) formValues[key] = value;\r\n        \r\n        if(this.state.auth === true) {\r\n            return (\r\n                <div className=\"SubmitSong\">\r\n\r\n\r\n                    {this.state.submitted === false ? '': this.renderFormResponse()}\r\n                    <form action=\"/submit\" method=\"POST\">\r\n                        <h2>Submit a new song</h2>\r\n                        <div className=\"SubmitSong__Formbox\">\r\n                        <TextInput label=\"Song Name\" placeholder={placeholders.name} name=\"name\" value={formValues.name} propfunction={this.handleFormUpdate} />\r\n                        <TextInput label=\"Song URL\" type=\"url\" placeholder={placeholders.url} name=\"url\" value={formValues.url} propfunction={this.handleFormUpdate}/>\r\n                        <TextInput label=\"Musician\" placeholder={placeholders.music} name=\"music\" value={formValues.music} propfunction={this.handleFormUpdate}/>\r\n                        <TextInput label=\"Lyricist\" placeholder={placeholders.lyrics} name=\"lyrics\" value={formValues.lyrics} propfunction={this.handleFormUpdate}/>\r\n                        <TextInput label=\"Vocalist\" placeholder={placeholders.vocals} name=\"vocals\" value={formValues.vocals} propfunction={this.handleFormUpdate}/>\r\n                        <TextInput label=\"Lyrics\" type=\"textarea\" placeholder={placeholders.lyricsheet} name=\"lyricsheet\" value={formValues.lyricsheet} propfunction={this.handleFormUpdate}/>\r\n                        <div>\r\n                        <button className=\"SubmitSong__Formbox__Button\" onClick={this.handleSongSubmit}>Submit</button>\r\n                        </div>\r\n                        </div>\r\n\r\n                        {/* <div>{this.state.content}</div> */}\r\n        \r\n\r\n\r\n\r\n                    </form>\r\n                \r\n        \r\n                </div>\r\n            );\r\n        } \r\n        \r\n        else {\r\n            return (\r\n            <div className=\"SubmitSong\">\r\n                <h4>{this.state.content}</h4>\r\n            </div>\r\n        )\r\n\r\n        } \r\n    }\r\n}\r\n\r\n\r\n\r\nexport default SubmitSong;","import React, { Component } from 'react';\r\nimport '../SubmitSong/SubmitSong.css';\r\nimport './SongEditor.css';\r\nimport TextInput from '../TextInput/TextInput';\r\nimport he from 'he';\r\n\r\n\r\nclass SongEditor extends Component {\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            content: 'You must be logged in to do that.',\r\n            submitted: false,\r\n            formResponse: '',\r\n            formValues: {\r\n                name: '',\r\n                url: '',\r\n                music: '',\r\n                lyrics: '',\r\n                vocals: '',\r\n                lyricsheet: '',\r\n                votes: '',\r\n                musicvote: '',\r\n                lyricsvote: '',\r\n                vocalsvote: '',\r\n                number: '0'\r\n            },\r\n            auth: false\r\n\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        console.log(\"Song editor initialized\");\r\n        // console.log(this.props);\r\n        // alert(\"Hi\");\r\n        this.sessionCheck();\r\n\r\n        this.getSongByID();\r\n\r\n    }\r\n\r\n    sessionCheck = () => {\r\n\r\n        let url = \"https://danieledminster.com:8080/sessioncheck\";\r\n        fetch(url, { \r\n                credentials: \"include\", \r\n        })\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            console.log(\"Fetch Response: \", res);\r\n\r\n\r\n            \r\n            if(\"key\" in res && this.state.auth === false) {\r\n                this.setState({\r\n                    auth: true,\r\n                    username: res.key,\r\n                    access_token: res.tokens.access_token,\r\n                    refresh_token: res.tokens.refresh_token,\r\n                    expiry: res.tokens.expires_at,\r\n                    expirySeconds: res.tokens.expires_in\r\n                });\r\n\r\n                this.setState({ auth: true} );\r\n            }\r\n            else {\r\n\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    handleSongSubmit = (event) => {\r\n        event.preventDefault();\r\n        // console.log(event);\r\n\r\n\r\n        if(this.validURL(this.state.formValues.url))\r\n        {\r\n            let baseURL = 'https://danieledminster.com:8080/update/';\r\n            let id = this.props.match.params.id;\r\n            let fullURL = baseURL+id;\r\n            // alert(event.target.textContent);\r\n\r\n\r\n            console.log(this.state.formValues);\r\n            console.log(fullURL)\r\n            fetch(fullURL, {\r\n                method: 'PATCH',\r\n                credentials: 'include',\r\n                body: JSON.stringify(this.state.formValues),\r\n                headers: {\r\n                    'Content-type': 'application/json'\r\n                }\r\n\r\n            }).then(res => res.json())\r\n            .then(res => {\r\n                console.log(res);\r\n                this.setState({\r\n                    submitted: true,\r\n                    formResponse: res\r\n                })\r\n            })\r\n            .catch(err => { \r\n                    console.log(err);\r\n            })\r\n        }\r\n        else {\r\n            this.setState({\r\n                submitted: true,\r\n                formResponse: {\r\n                    errors: {\r\n                        url: {\r\n                            message: 'Invalid Song URL'\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    validURL = (str) => {\r\n        //https://stackoverflow.com/questions/5717093/check-if-a-javascript-string-is-a-url\r\n\r\n        var pattern = new RegExp('^(https?:\\\\/\\\\/)?'+ // protocol\r\n          '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|'+ // domain name\r\n          '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))'+ // OR ip (v4) address\r\n          '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*'+ // port and path\r\n          '(\\\\?[;&a-z\\\\d%_.~+=-]*)?'+ // query string\r\n          '(\\\\#[-a-z\\\\d_]*)?$','i'); // fragment locator\r\n        return !!pattern.test(str);\r\n      }\r\n\r\n    getSongByID = () => {\r\n        let id = this.props.match.params.id;\r\n        let baseURL = \"https://danieledminster.com:8080/song/id/\";\r\n        let fullURL = baseURL+id;\r\n\r\n        fetch(fullURL, {\r\n            credentials: 'include',\r\n            method: 'get'\r\n        }).then(res => res.json())\r\n        .then(res => {\r\n            console.log(res);\r\n            this.setState({\r\n                song: res,\r\n                formValues: res\r\n            })\r\n        })\r\n    }\r\n\r\n    handleFormUpdate = (event) => {\r\n        // console.log(event.target.name);\r\n        let {name, value} = event.target;\r\n        let hFUformValues = {};\r\n        // console.log(value);\r\n\r\n        for(const [k, v] of Object.entries(this.state.formValues)) { \r\n            // currentFormValues[k] = v;\r\n            if(k === name) {\r\n                \r\n                k === 'lyricsheet' ? hFUformValues[k] = he.encode(value): hFUformValues[k] = value;\r\n                \r\n            }\r\n            else {\r\n                k === 'lyricsheet' ? hFUformValues[k] = he.encode(v) : hFUformValues[k] = v;\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            formValues: hFUformValues\r\n        }, this.logState);\r\n\r\n    }\r\n\r\n    logState = () => {\r\n        console.log(this.state.formValues);\r\n    }\r\n\r\n    hideSubmittedInfo = () => {\r\n        this.setState({submitted: false});\r\n    }\r\n\r\n    renderFormResponse = () => {\r\n        let errkey = \"errors\";\r\n        if((errkey in this.state.formResponse)) {\r\n            // let errs = this.state.formResponse.errors\r\n            let errs = [];\r\n\r\n\r\n            // console.log(typeof this.state.formResponse.errors)\r\n            Object.keys(this.state.formResponse.errors).forEach(key => {\r\n                errs.push(this.state.formResponse.errors[key].message);\r\n            })\r\n\r\n\r\n            return ( \r\n                <div className=\"SubmitSong__SubmitInfo\" >\r\n                    <div className=\"SubmitSong__SubmitInfo__List\">\r\n                    <ul>\r\n\r\n                        { errs.map((item, i) => {\r\n                            return <li key={i}>{item}</li>\r\n                        })}\r\n                    </ul>\r\n                    </div>\r\n\r\n                    <div className=\"SubmitSong__SubmitInfo__exit\" onClick={this.hideSubmittedInfo}><a aria-label=\"Close Error Notification Box\">&times;</a></div>\r\n\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n\r\n\r\n            let { name, music, lyrics, vocals} = this.state.formResponse;\r\n            let successResponse = `Song: \"${name}\" successfully updated for ${music}, ${lyrics}, and ${vocals}.`;\r\n            return ( \r\n            \r\n          <div className=\"SubmitSong__SubmitSuccess\" >\r\n              <div className=\"SubmitSong__SubmitSuccess__Message\">\r\n                  { successResponse }\r\n            </div>\r\n\r\n            <div className=\"SubmitSong__SubmitInfo__exit\" onClick={this.hideSubmittedInfo}><a aria-label=\"Close Success Notification Box\">&times;</a></div>\r\n\r\n        </div>\r\n\r\n            );\r\n\r\n            // return <div className=\"SubmitSong__SubmitInfo\" onClick={this.hideSubmittedInfo}>This is my JSX form response</div>\r\n        }\r\n    }\r\n\r\n    \r\n    render() {\r\n        // console.log();\r\n\r\n        let formValues = {};\r\n        for(const [key, value] of Object.entries(this.state.formValues)) formValues[key] = value;\r\n\r\n        \r\n        if(this.state.auth === true) {\r\n            return (\r\n                <div className=\"SongEditor\">\r\n                        {/* {this.props.match.params} */}\r\n                    \r\n                        {this.state.submitted === false ? '': this.renderFormResponse()}\r\n                        {(\"song\" in this.state ) ? \r\n\r\n                        <>\r\n                        <form action=\"/edit\" method=\"PATCH\">\r\n                        <TextInput name=\"name\" label=\"Song Name\" placeholder={this.state.song.name} propfunction={this.handleFormUpdate} /> \r\n                        <TextInput name=\"url\" label=\"URL\" placeholder={this.state.song.url} propfunction={this.handleFormUpdate} /> \r\n                        <TextInput name=\"music\" label=\"Musician\" placeholder={this.state.song.music} propfunction={this.handleFormUpdate} /> \r\n                        <TextInput name=\"lyrics\" label=\"Lyricist\" placeholder={this.state.song.lyrics} propfunction={this.handleFormUpdate} /> \r\n                        <TextInput name=\"lyrics\" label=\"Vocals\" placeholder={this.state.song.vocals} propfunction={this.handleFormUpdate} />\r\n                        <TextInput name=\"lyricsheet\" label=\"Lyricsheet\" value={he.decode(this.state.song.lyricsheet)} type=\"textarea\" propfunction={this.handleFormUpdate} />\r\n                        <div className=\"SongEditor__Votesbox\">\r\n                        <TextInput name=\"votes\" label=\"Track Votes\" placeholder={this.state.song.votes} propfunction={this.handleFormUpdate} /> \r\n                        <TextInput name=\"musicvote\" label=\"Music Votes\" placeholder={this.state.song.musicvote} propfunction={this.handleFormUpdate} /> \r\n                        <TextInput name=\"lyricsvote\" label=\"Lyrics Votes\" placeholder={this.state.song.lyricsvote} propfunction={this.handleFormUpdate} /> \r\n                        <TextInput name=\"vocalsvote\" label=\"Vocals Votes\" placeholder={this.state.song.vocalsvote} propfunction={this.handleFormUpdate} />\r\n                    \r\n                        </div>\r\n                        <div className=\"SongEditor__Submit\">\r\n                        <button className=\"SongEditor__Button\" onClick={this.handleSongSubmit}>Submit</button>\r\n                        </div>\r\n                        </form>\r\n                        </>\r\n                        : '' }   \r\n\r\n                </div>\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <div className=\"SongEditor\"><h3>{this.state.content}</h3></div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default SongEditor;","import React, { Component } from 'react';\r\nimport he from 'he';\r\nimport './AdminSongDisplay.css';\r\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\r\nimport SongEditor from '../SongEditor/SongEditor';\r\n\r\nclass AdminSongDisplay extends Component {\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            auth: false,\r\n            // songs: ''\r\n        }\r\n\r\n        // let notifClassList = ' ';\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        let url = 'https://danieledminster.com:8080/all/desc';\r\n        fetch(url)\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            // console.log(res);\r\n            this.setState({\r\n                songs: res\r\n            })\r\n        })\r\n\r\n    }\r\n\r\n    deleteSong = (event) => {\r\n        let songID = event.target.getAttribute(\"data-id\");\r\n\r\n        if(window.confirm(\"Are you sure you want to delete this song?\")) {\r\n            let url = `https://danieledminster.com:8080/delete/${songID}`;\r\n            fetch(url, { \r\n                method: 'DELETE',\r\n                credentials: 'include'\r\n             \r\n            }).then(res => res.json())\r\n            .then(res => {\r\n                // lsongsArray = this.state.songs;\r\n\r\n                // const index = songsArray.indexOf(songID);\r\n\r\n\r\n                let songsArray = this.state.songs;\r\n                let index = -1;\r\n                for(let i=0;i<songsArray.length;i++) {\r\n                    if(songsArray[i]._id === songID) {\r\n                        index = i;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                songsArray.splice(index, 1);\r\n                this.setState({\r\n                    songs: songsArray,\r\n                    deletedSong: true,\r\n                    jsonResponse: res.response\r\n                });\r\n            })\r\n\r\n            // console.log(\"songarray\", songsArray)\r\n            // const index = songsArray.indexOf(songID);\r\n            // console.log(index);\r\n        }\r\n    }\r\n\r\n    showDeletedResponse() {\r\n\r\n            return (\r\n                <div className=\"AdminSongDisplay__MessageSuccess\">\r\n                    <div className=\"AdminSongDisplay__MessageSuccess__Message\">{this.state.jsonResponse}</div><div className=\"AdminSongDisplay__MessageSuccess__X\"><a onClick={this.hideNotification} aria-label=\"Close Success Notification Box\">&times;</a></div>\r\n                </div>\r\n            );\r\n\r\n    }\r\n\r\n    hideNotification = () => {\r\n        // this.showDeletedResponse(' leaving');\r\n        this.setState({deletedSong: false});\r\n    }\r\n\r\n    render() {\r\n        \r\n        // console.log(this.state.songs);\r\n        return (\r\n            <div className=\"AdminSongDisplayContainer\">\r\n\r\n        { this.state.deletedSong === true ? this.showDeletedResponse() : '' }\r\n\r\n            {/* {this.state.songs.map((item, i) => {\r\n                return <div className=\"AdminSongDisplay__Item\"></div>\r\n            })} */}\r\n\r\n            <div className=\"AdminSongDisplay__Titlebar\">\r\n                <div className=\"AdminSongDisplay__Titlebar__Round\">#</div>\r\n                <div className=\"AdminSongDisplay__Titlebar__Name\">Name</div>\r\n                <div className=\"AdminSongDisplay__Titlebar__Musician\">Musician</div>\r\n                <div className=\"AdminSongDisplay__Titlebar__Lyricist\">Lyricist</div>\r\n                <div className=\"AdminSongDisplay__Titlebar__Vocalist\">Vocalist</div>\r\n                <div className=\"AdminSongDisplay__Titlebar__Vote\">T</div>\r\n                <div className=\"AdminSongDisplay__Titlebar__Vote\">M</div>\r\n                <div className=\"AdminSongDisplay__Titlebar__Vote\">L</div>\r\n                <div className=\"AdminSongDisplay__Titlebar__Vote\">V</div>\r\n                <div className=\"AdminSongDisplay__Titlebar__Delete\">Delete</div>\r\n                \r\n\r\n            </div>\r\n            {\r\n                (\"songs\" in this.state ) ?  this.state.songs.map((item, i) => { \r\n                    return ( \r\n                        <div key={i} className=\"AdminSongDisplay__Item\">\r\n                            <div className=\"AdminSongDisplay__Item__Round\">{item.round}</div>\r\n                            <div className=\"AdminSongDisplay__Item__Name\"><Link to={`/admin/edit/${item._id}`}>{he.decode(item.name)}</Link></div>\r\n                            <div className=\"AdminSongDisplay__Item__Musician\">{item.music}</div>\r\n                            <div className=\"AdminSongDisplay__Item__Lyricist\">{item.lyrics}</div>\r\n                            <div className=\"AdminSongDisplay__Item__Vocalist\">{item.vocals}</div>\r\n                            <div className=\"AdminSongDisplay__Item__Vote\">{item.votes}</div>\r\n                            <div className=\"AdminSongDisplay__Item__Vote\">{item.musicvote}</div>\r\n                            <div className=\"AdminSongDisplay__Item__Vote\">{item.lyricsvote}</div>\r\n                            <div className=\"AdminSongDisplay__Item__Vote\">{item.vocalsvote}</div>\r\n                            <div className=\"AdminSongDisplay__Item__Delete\"><a aria-label=\"Close Success Notification Box\" data-id={item._id} onClick={this.deleteSong}>X</a></div>\r\n                        </div> )\r\n                }) : ''\r\n            }\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default AdminSongDisplay;","import React, { useState, Component } from 'react';\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\nimport './App.css';\n// import songs from './data/songs.json';\nimport Navbar from './Navbar/Navbar';\nimport SongDisplay from './SongDisplay/SongDisplay';\nimport SubmitSong from './SubmitSong/SubmitSong';\n// import Admin from './Admin/Admin';\nimport AdminSongDisplay from './AdminSongDisplay/AdminSongDisplay';\nimport SongEditor from './SongEditor/SongEditor';\n// import AudioPlayer from './AudioPlayer/AudioPlayer';\n// require('wavesurfer.js');\n\n\n\n\nclass App extends Component {\n  constructor() {\n      super();\n\n      this.state = {\n        auth: false,\n        content: 'You must be logged in to do that.'\n      }\n  }\n\n  componentDidMount(){\n    this.sessionCheck();\n  }\n\n\n  sessionCheck = () => {\n\n    let url = \"https://danieledminster.com:8080/sessioncheck\";\n    fetch(url, { \n            credentials: \"include\", \n    })\n    .then(res => res.json())\n    .then(res => {\n        console.log(\"Fetch Response: \", res);\n\n        if(\"key\" in res && this.state.auth === false) {\n            this.setState({\n                auth: true,\n                username: res.key,\n                access_token: res.tokens.access_token,\n                refresh_token: res.tokens.refresh_token,\n                expiry: res.tokens.expires_at,\n                expirySeconds: res.tokens.expires_in\n            });\n\n            this.setState({ auth: true} );\n        }\n        else {\n\n        }\n\n    });\n}\n\n\n\n  render() {\n      return (\n        <div className=\"App\">\n          <Router>\n          <Navbar />\n          <Switch>\n            <Route exact path=\"/\"  component={SongDisplay}/>\n            <Route exact path=\"/submitsong\"  component={SubmitSong}/>\n            \n            {/* <Route exact path=\"/admin\"  component={Admin}/> */}\n          {/* <SongDisplay /> */}\n\n\n          {this.state.auth === true ? \n            <Route path=\"/admin\">\n            <div className=\"AdminContainer\">\n                    <div className=\"AdminMenuBar\">\n                      <div className=\"AdminMenuBar__Header\"> Moderator Functions</div>\n                    <div className=\"AdminMenuBar__Link\"><Link to=\"/admin\">Song List View</Link></div>\n                    <div className=\"AdminMenuBar__Link\">Round List View</div>\n                    </div>\n              <Switch>\n               \n                <Route  path=\"/admin/edit/:id\" render={routerProps => <SongEditor {...routerProps} /> }  />\n                <Route exact path=\"/admin\" component={AdminSongDisplay} />         \n               \n              </Switch>          \n           \n            </div>\n\n            </Route> \n            \n            : \n            \n            <Route path=\"/admin\">\n               {/* <div className=\"AdminContainer\"> */}\n              <h3 className=\"Nope\">{this.state.content}</h3>\n              {/* </div> */}\n               </Route> }\n\n\n\n          </Switch>\n          </Router>\n          {/* <AudioPlayer url=\"https://api.soundcloud.com/tracks/797171077/stream\" /> */}\n\n      \n        \n        </div>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n// import 'bootstrap/dist/css/bootstrap.min.css';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}